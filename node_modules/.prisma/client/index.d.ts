
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Galaxys
 * 
 */
export type Galaxys = {
  galaxyId: string
  name: string
  description: string
  color: string
  size: Prisma.Decimal
}

/**
 * Model Planets
 * 
 */
export type Planets = {
  planetId: string
  name: string
  description: string
  size: Prisma.Decimal
  galaxyGalaxyId: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Galaxys
 * const galaxys = await prisma.galaxys.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Galaxys
   * const galaxys = await prisma.galaxys.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.galaxys`: Exposes CRUD operations for the **Galaxys** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Galaxys
    * const galaxys = await prisma.galaxys.findMany()
    * ```
    */
  get galaxys(): Prisma.GalaxysDelegate<GlobalReject>;

  /**
   * `prisma.planets`: Exposes CRUD operations for the **Planets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Planets
    * const planets = await prisma.planets.findMany()
    * ```
    */
  get planets(): Prisma.PlanetsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Galaxys: 'Galaxys',
    Planets: 'Planets'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GalaxysCountOutputType
   */


  export type GalaxysCountOutputType = {
    planets: number
  }

  export type GalaxysCountOutputTypeSelect = {
    planets?: boolean
  }

  export type GalaxysCountOutputTypeGetPayload<
    S extends boolean | null | undefined | GalaxysCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? GalaxysCountOutputType
    : S extends undefined
    ? never
    : S extends GalaxysCountOutputTypeArgs
    ?'include' extends U
    ? GalaxysCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof GalaxysCountOutputType ? GalaxysCountOutputType[P] : never
  } 
    : GalaxysCountOutputType
  : GalaxysCountOutputType




  // Custom InputTypes

  /**
   * GalaxysCountOutputType without action
   */
  export type GalaxysCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GalaxysCountOutputType
     * 
    **/
    select?: GalaxysCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Galaxys
   */


  export type AggregateGalaxys = {
    _count: GalaxysCountAggregateOutputType | null
    _avg: GalaxysAvgAggregateOutputType | null
    _sum: GalaxysSumAggregateOutputType | null
    _min: GalaxysMinAggregateOutputType | null
    _max: GalaxysMaxAggregateOutputType | null
  }

  export type GalaxysAvgAggregateOutputType = {
    size: Decimal | null
  }

  export type GalaxysSumAggregateOutputType = {
    size: Decimal | null
  }

  export type GalaxysMinAggregateOutputType = {
    galaxyId: string | null
    name: string | null
    description: string | null
    color: string | null
    size: Decimal | null
  }

  export type GalaxysMaxAggregateOutputType = {
    galaxyId: string | null
    name: string | null
    description: string | null
    color: string | null
    size: Decimal | null
  }

  export type GalaxysCountAggregateOutputType = {
    galaxyId: number
    name: number
    description: number
    color: number
    size: number
    _all: number
  }


  export type GalaxysAvgAggregateInputType = {
    size?: true
  }

  export type GalaxysSumAggregateInputType = {
    size?: true
  }

  export type GalaxysMinAggregateInputType = {
    galaxyId?: true
    name?: true
    description?: true
    color?: true
    size?: true
  }

  export type GalaxysMaxAggregateInputType = {
    galaxyId?: true
    name?: true
    description?: true
    color?: true
    size?: true
  }

  export type GalaxysCountAggregateInputType = {
    galaxyId?: true
    name?: true
    description?: true
    color?: true
    size?: true
    _all?: true
  }

  export type GalaxysAggregateArgs = {
    /**
     * Filter which Galaxys to aggregate.
     * 
    **/
    where?: GalaxysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Galaxys to fetch.
     * 
    **/
    orderBy?: Enumerable<GalaxysOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GalaxysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Galaxys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Galaxys.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Galaxys
    **/
    _count?: true | GalaxysCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GalaxysAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GalaxysSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GalaxysMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GalaxysMaxAggregateInputType
  }

  export type GetGalaxysAggregateType<T extends GalaxysAggregateArgs> = {
        [P in keyof T & keyof AggregateGalaxys]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGalaxys[P]>
      : GetScalarType<T[P], AggregateGalaxys[P]>
  }




  export type GalaxysGroupByArgs = {
    where?: GalaxysWhereInput
    orderBy?: Enumerable<GalaxysOrderByWithAggregationInput>
    by: Array<GalaxysScalarFieldEnum>
    having?: GalaxysScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GalaxysCountAggregateInputType | true
    _avg?: GalaxysAvgAggregateInputType
    _sum?: GalaxysSumAggregateInputType
    _min?: GalaxysMinAggregateInputType
    _max?: GalaxysMaxAggregateInputType
  }


  export type GalaxysGroupByOutputType = {
    galaxyId: string
    name: string
    description: string
    color: string
    size: Decimal
    _count: GalaxysCountAggregateOutputType | null
    _avg: GalaxysAvgAggregateOutputType | null
    _sum: GalaxysSumAggregateOutputType | null
    _min: GalaxysMinAggregateOutputType | null
    _max: GalaxysMaxAggregateOutputType | null
  }

  type GetGalaxysGroupByPayload<T extends GalaxysGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GalaxysGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GalaxysGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GalaxysGroupByOutputType[P]>
            : GetScalarType<T[P], GalaxysGroupByOutputType[P]>
        }
      >
    >


  export type GalaxysSelect = {
    galaxyId?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    size?: boolean
    planets?: boolean | PlanetsFindManyArgs
    _count?: boolean | GalaxysCountOutputTypeArgs
  }

  export type GalaxysInclude = {
    planets?: boolean | PlanetsFindManyArgs
    _count?: boolean | GalaxysCountOutputTypeArgs
  }

  export type GalaxysGetPayload<
    S extends boolean | null | undefined | GalaxysArgs,
    U = keyof S
      > = S extends true
        ? Galaxys
    : S extends undefined
    ? never
    : S extends GalaxysArgs | GalaxysFindManyArgs
    ?'include' extends U
    ? Galaxys  & {
    [P in TrueKeys<S['include']>]:
        P extends 'planets' ? Array < PlanetsGetPayload<S['include'][P]>>  :
        P extends '_count' ? GalaxysCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'planets' ? Array < PlanetsGetPayload<S['select'][P]>>  :
        P extends '_count' ? GalaxysCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Galaxys ? Galaxys[P] : never
  } 
    : Galaxys
  : Galaxys


  type GalaxysCountArgs = Merge<
    Omit<GalaxysFindManyArgs, 'select' | 'include'> & {
      select?: GalaxysCountAggregateInputType | true
    }
  >

  export interface GalaxysDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Galaxys that matches the filter.
     * @param {GalaxysFindUniqueArgs} args - Arguments to find a Galaxys
     * @example
     * // Get one Galaxys
     * const galaxys = await prisma.galaxys.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GalaxysFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GalaxysFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Galaxys'> extends True ? CheckSelect<T, Prisma__GalaxysClient<Galaxys>, Prisma__GalaxysClient<GalaxysGetPayload<T>>> : CheckSelect<T, Prisma__GalaxysClient<Galaxys | null >, Prisma__GalaxysClient<GalaxysGetPayload<T> | null >>

    /**
     * Find the first Galaxys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalaxysFindFirstArgs} args - Arguments to find a Galaxys
     * @example
     * // Get one Galaxys
     * const galaxys = await prisma.galaxys.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GalaxysFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GalaxysFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Galaxys'> extends True ? CheckSelect<T, Prisma__GalaxysClient<Galaxys>, Prisma__GalaxysClient<GalaxysGetPayload<T>>> : CheckSelect<T, Prisma__GalaxysClient<Galaxys | null >, Prisma__GalaxysClient<GalaxysGetPayload<T> | null >>

    /**
     * Find zero or more Galaxys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalaxysFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Galaxys
     * const galaxys = await prisma.galaxys.findMany()
     * 
     * // Get first 10 Galaxys
     * const galaxys = await prisma.galaxys.findMany({ take: 10 })
     * 
     * // Only select the `galaxyId`
     * const galaxysWithGalaxyIdOnly = await prisma.galaxys.findMany({ select: { galaxyId: true } })
     * 
    **/
    findMany<T extends GalaxysFindManyArgs>(
      args?: SelectSubset<T, GalaxysFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Galaxys>>, PrismaPromise<Array<GalaxysGetPayload<T>>>>

    /**
     * Create a Galaxys.
     * @param {GalaxysCreateArgs} args - Arguments to create a Galaxys.
     * @example
     * // Create one Galaxys
     * const Galaxys = await prisma.galaxys.create({
     *   data: {
     *     // ... data to create a Galaxys
     *   }
     * })
     * 
    **/
    create<T extends GalaxysCreateArgs>(
      args: SelectSubset<T, GalaxysCreateArgs>
    ): CheckSelect<T, Prisma__GalaxysClient<Galaxys>, Prisma__GalaxysClient<GalaxysGetPayload<T>>>

    /**
     * Create many Galaxys.
     *     @param {GalaxysCreateManyArgs} args - Arguments to create many Galaxys.
     *     @example
     *     // Create many Galaxys
     *     const galaxys = await prisma.galaxys.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GalaxysCreateManyArgs>(
      args?: SelectSubset<T, GalaxysCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Galaxys.
     * @param {GalaxysDeleteArgs} args - Arguments to delete one Galaxys.
     * @example
     * // Delete one Galaxys
     * const Galaxys = await prisma.galaxys.delete({
     *   where: {
     *     // ... filter to delete one Galaxys
     *   }
     * })
     * 
    **/
    delete<T extends GalaxysDeleteArgs>(
      args: SelectSubset<T, GalaxysDeleteArgs>
    ): CheckSelect<T, Prisma__GalaxysClient<Galaxys>, Prisma__GalaxysClient<GalaxysGetPayload<T>>>

    /**
     * Update one Galaxys.
     * @param {GalaxysUpdateArgs} args - Arguments to update one Galaxys.
     * @example
     * // Update one Galaxys
     * const galaxys = await prisma.galaxys.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GalaxysUpdateArgs>(
      args: SelectSubset<T, GalaxysUpdateArgs>
    ): CheckSelect<T, Prisma__GalaxysClient<Galaxys>, Prisma__GalaxysClient<GalaxysGetPayload<T>>>

    /**
     * Delete zero or more Galaxys.
     * @param {GalaxysDeleteManyArgs} args - Arguments to filter Galaxys to delete.
     * @example
     * // Delete a few Galaxys
     * const { count } = await prisma.galaxys.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GalaxysDeleteManyArgs>(
      args?: SelectSubset<T, GalaxysDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Galaxys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalaxysUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Galaxys
     * const galaxys = await prisma.galaxys.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GalaxysUpdateManyArgs>(
      args: SelectSubset<T, GalaxysUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Galaxys.
     * @param {GalaxysUpsertArgs} args - Arguments to update or create a Galaxys.
     * @example
     * // Update or create a Galaxys
     * const galaxys = await prisma.galaxys.upsert({
     *   create: {
     *     // ... data to create a Galaxys
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Galaxys we want to update
     *   }
     * })
    **/
    upsert<T extends GalaxysUpsertArgs>(
      args: SelectSubset<T, GalaxysUpsertArgs>
    ): CheckSelect<T, Prisma__GalaxysClient<Galaxys>, Prisma__GalaxysClient<GalaxysGetPayload<T>>>

    /**
     * Count the number of Galaxys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalaxysCountArgs} args - Arguments to filter Galaxys to count.
     * @example
     * // Count the number of Galaxys
     * const count = await prisma.galaxys.count({
     *   where: {
     *     // ... the filter for the Galaxys we want to count
     *   }
     * })
    **/
    count<T extends GalaxysCountArgs>(
      args?: Subset<T, GalaxysCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GalaxysCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Galaxys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalaxysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GalaxysAggregateArgs>(args: Subset<T, GalaxysAggregateArgs>): PrismaPromise<GetGalaxysAggregateType<T>>

    /**
     * Group by Galaxys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalaxysGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GalaxysGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GalaxysGroupByArgs['orderBy'] }
        : { orderBy?: GalaxysGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GalaxysGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGalaxysGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Galaxys.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GalaxysClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    planets<T extends PlanetsFindManyArgs = {}>(args?: Subset<T, PlanetsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Planets>>, PrismaPromise<Array<PlanetsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Galaxys findUnique
   */
  export type GalaxysFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Galaxys
     * 
    **/
    select?: GalaxysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GalaxysInclude | null
    /**
     * Throw an Error if a Galaxys can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Galaxys to fetch.
     * 
    **/
    where: GalaxysWhereUniqueInput
  }


  /**
   * Galaxys findFirst
   */
  export type GalaxysFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Galaxys
     * 
    **/
    select?: GalaxysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GalaxysInclude | null
    /**
     * Throw an Error if a Galaxys can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Galaxys to fetch.
     * 
    **/
    where?: GalaxysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Galaxys to fetch.
     * 
    **/
    orderBy?: Enumerable<GalaxysOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Galaxys.
     * 
    **/
    cursor?: GalaxysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Galaxys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Galaxys.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Galaxys.
     * 
    **/
    distinct?: Enumerable<GalaxysScalarFieldEnum>
  }


  /**
   * Galaxys findMany
   */
  export type GalaxysFindManyArgs = {
    /**
     * Select specific fields to fetch from the Galaxys
     * 
    **/
    select?: GalaxysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GalaxysInclude | null
    /**
     * Filter, which Galaxys to fetch.
     * 
    **/
    where?: GalaxysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Galaxys to fetch.
     * 
    **/
    orderBy?: Enumerable<GalaxysOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Galaxys.
     * 
    **/
    cursor?: GalaxysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Galaxys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Galaxys.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GalaxysScalarFieldEnum>
  }


  /**
   * Galaxys create
   */
  export type GalaxysCreateArgs = {
    /**
     * Select specific fields to fetch from the Galaxys
     * 
    **/
    select?: GalaxysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GalaxysInclude | null
    /**
     * The data needed to create a Galaxys.
     * 
    **/
    data: XOR<GalaxysCreateInput, GalaxysUncheckedCreateInput>
  }


  /**
   * Galaxys createMany
   */
  export type GalaxysCreateManyArgs = {
    /**
     * The data used to create many Galaxys.
     * 
    **/
    data: Enumerable<GalaxysCreateManyInput>
  }


  /**
   * Galaxys update
   */
  export type GalaxysUpdateArgs = {
    /**
     * Select specific fields to fetch from the Galaxys
     * 
    **/
    select?: GalaxysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GalaxysInclude | null
    /**
     * The data needed to update a Galaxys.
     * 
    **/
    data: XOR<GalaxysUpdateInput, GalaxysUncheckedUpdateInput>
    /**
     * Choose, which Galaxys to update.
     * 
    **/
    where: GalaxysWhereUniqueInput
  }


  /**
   * Galaxys updateMany
   */
  export type GalaxysUpdateManyArgs = {
    /**
     * The data used to update Galaxys.
     * 
    **/
    data: XOR<GalaxysUpdateManyMutationInput, GalaxysUncheckedUpdateManyInput>
    /**
     * Filter which Galaxys to update
     * 
    **/
    where?: GalaxysWhereInput
  }


  /**
   * Galaxys upsert
   */
  export type GalaxysUpsertArgs = {
    /**
     * Select specific fields to fetch from the Galaxys
     * 
    **/
    select?: GalaxysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GalaxysInclude | null
    /**
     * The filter to search for the Galaxys to update in case it exists.
     * 
    **/
    where: GalaxysWhereUniqueInput
    /**
     * In case the Galaxys found by the `where` argument doesn't exist, create a new Galaxys with this data.
     * 
    **/
    create: XOR<GalaxysCreateInput, GalaxysUncheckedCreateInput>
    /**
     * In case the Galaxys was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GalaxysUpdateInput, GalaxysUncheckedUpdateInput>
  }


  /**
   * Galaxys delete
   */
  export type GalaxysDeleteArgs = {
    /**
     * Select specific fields to fetch from the Galaxys
     * 
    **/
    select?: GalaxysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GalaxysInclude | null
    /**
     * Filter which Galaxys to delete.
     * 
    **/
    where: GalaxysWhereUniqueInput
  }


  /**
   * Galaxys deleteMany
   */
  export type GalaxysDeleteManyArgs = {
    /**
     * Filter which Galaxys to delete
     * 
    **/
    where?: GalaxysWhereInput
  }


  /**
   * Galaxys without action
   */
  export type GalaxysArgs = {
    /**
     * Select specific fields to fetch from the Galaxys
     * 
    **/
    select?: GalaxysSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GalaxysInclude | null
  }



  /**
   * Model Planets
   */


  export type AggregatePlanets = {
    _count: PlanetsCountAggregateOutputType | null
    _avg: PlanetsAvgAggregateOutputType | null
    _sum: PlanetsSumAggregateOutputType | null
    _min: PlanetsMinAggregateOutputType | null
    _max: PlanetsMaxAggregateOutputType | null
  }

  export type PlanetsAvgAggregateOutputType = {
    size: Decimal | null
  }

  export type PlanetsSumAggregateOutputType = {
    size: Decimal | null
  }

  export type PlanetsMinAggregateOutputType = {
    planetId: string | null
    name: string | null
    description: string | null
    size: Decimal | null
    galaxyGalaxyId: string | null
  }

  export type PlanetsMaxAggregateOutputType = {
    planetId: string | null
    name: string | null
    description: string | null
    size: Decimal | null
    galaxyGalaxyId: string | null
  }

  export type PlanetsCountAggregateOutputType = {
    planetId: number
    name: number
    description: number
    size: number
    galaxyGalaxyId: number
    _all: number
  }


  export type PlanetsAvgAggregateInputType = {
    size?: true
  }

  export type PlanetsSumAggregateInputType = {
    size?: true
  }

  export type PlanetsMinAggregateInputType = {
    planetId?: true
    name?: true
    description?: true
    size?: true
    galaxyGalaxyId?: true
  }

  export type PlanetsMaxAggregateInputType = {
    planetId?: true
    name?: true
    description?: true
    size?: true
    galaxyGalaxyId?: true
  }

  export type PlanetsCountAggregateInputType = {
    planetId?: true
    name?: true
    description?: true
    size?: true
    galaxyGalaxyId?: true
    _all?: true
  }

  export type PlanetsAggregateArgs = {
    /**
     * Filter which Planets to aggregate.
     * 
    **/
    where?: PlanetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planets to fetch.
     * 
    **/
    orderBy?: Enumerable<PlanetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PlanetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Planets
    **/
    _count?: true | PlanetsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanetsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanetsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanetsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanetsMaxAggregateInputType
  }

  export type GetPlanetsAggregateType<T extends PlanetsAggregateArgs> = {
        [P in keyof T & keyof AggregatePlanets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlanets[P]>
      : GetScalarType<T[P], AggregatePlanets[P]>
  }




  export type PlanetsGroupByArgs = {
    where?: PlanetsWhereInput
    orderBy?: Enumerable<PlanetsOrderByWithAggregationInput>
    by: Array<PlanetsScalarFieldEnum>
    having?: PlanetsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanetsCountAggregateInputType | true
    _avg?: PlanetsAvgAggregateInputType
    _sum?: PlanetsSumAggregateInputType
    _min?: PlanetsMinAggregateInputType
    _max?: PlanetsMaxAggregateInputType
  }


  export type PlanetsGroupByOutputType = {
    planetId: string
    name: string
    description: string
    size: Decimal
    galaxyGalaxyId: string | null
    _count: PlanetsCountAggregateOutputType | null
    _avg: PlanetsAvgAggregateOutputType | null
    _sum: PlanetsSumAggregateOutputType | null
    _min: PlanetsMinAggregateOutputType | null
    _max: PlanetsMaxAggregateOutputType | null
  }

  type GetPlanetsGroupByPayload<T extends PlanetsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PlanetsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanetsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanetsGroupByOutputType[P]>
            : GetScalarType<T[P], PlanetsGroupByOutputType[P]>
        }
      >
    >


  export type PlanetsSelect = {
    planetId?: boolean
    name?: boolean
    description?: boolean
    size?: boolean
    Galaxy?: boolean | GalaxysArgs
    galaxyGalaxyId?: boolean
  }

  export type PlanetsInclude = {
    Galaxy?: boolean | GalaxysArgs
  }

  export type PlanetsGetPayload<
    S extends boolean | null | undefined | PlanetsArgs,
    U = keyof S
      > = S extends true
        ? Planets
    : S extends undefined
    ? never
    : S extends PlanetsArgs | PlanetsFindManyArgs
    ?'include' extends U
    ? Planets  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Galaxy' ? GalaxysGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Galaxy' ? GalaxysGetPayload<S['select'][P]> | null :  P extends keyof Planets ? Planets[P] : never
  } 
    : Planets
  : Planets


  type PlanetsCountArgs = Merge<
    Omit<PlanetsFindManyArgs, 'select' | 'include'> & {
      select?: PlanetsCountAggregateInputType | true
    }
  >

  export interface PlanetsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Planets that matches the filter.
     * @param {PlanetsFindUniqueArgs} args - Arguments to find a Planets
     * @example
     * // Get one Planets
     * const planets = await prisma.planets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlanetsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PlanetsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Planets'> extends True ? CheckSelect<T, Prisma__PlanetsClient<Planets>, Prisma__PlanetsClient<PlanetsGetPayload<T>>> : CheckSelect<T, Prisma__PlanetsClient<Planets | null >, Prisma__PlanetsClient<PlanetsGetPayload<T> | null >>

    /**
     * Find the first Planets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanetsFindFirstArgs} args - Arguments to find a Planets
     * @example
     * // Get one Planets
     * const planets = await prisma.planets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlanetsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PlanetsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Planets'> extends True ? CheckSelect<T, Prisma__PlanetsClient<Planets>, Prisma__PlanetsClient<PlanetsGetPayload<T>>> : CheckSelect<T, Prisma__PlanetsClient<Planets | null >, Prisma__PlanetsClient<PlanetsGetPayload<T> | null >>

    /**
     * Find zero or more Planets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanetsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Planets
     * const planets = await prisma.planets.findMany()
     * 
     * // Get first 10 Planets
     * const planets = await prisma.planets.findMany({ take: 10 })
     * 
     * // Only select the `planetId`
     * const planetsWithPlanetIdOnly = await prisma.planets.findMany({ select: { planetId: true } })
     * 
    **/
    findMany<T extends PlanetsFindManyArgs>(
      args?: SelectSubset<T, PlanetsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Planets>>, PrismaPromise<Array<PlanetsGetPayload<T>>>>

    /**
     * Create a Planets.
     * @param {PlanetsCreateArgs} args - Arguments to create a Planets.
     * @example
     * // Create one Planets
     * const Planets = await prisma.planets.create({
     *   data: {
     *     // ... data to create a Planets
     *   }
     * })
     * 
    **/
    create<T extends PlanetsCreateArgs>(
      args: SelectSubset<T, PlanetsCreateArgs>
    ): CheckSelect<T, Prisma__PlanetsClient<Planets>, Prisma__PlanetsClient<PlanetsGetPayload<T>>>

    /**
     * Create many Planets.
     *     @param {PlanetsCreateManyArgs} args - Arguments to create many Planets.
     *     @example
     *     // Create many Planets
     *     const planets = await prisma.planets.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlanetsCreateManyArgs>(
      args?: SelectSubset<T, PlanetsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Planets.
     * @param {PlanetsDeleteArgs} args - Arguments to delete one Planets.
     * @example
     * // Delete one Planets
     * const Planets = await prisma.planets.delete({
     *   where: {
     *     // ... filter to delete one Planets
     *   }
     * })
     * 
    **/
    delete<T extends PlanetsDeleteArgs>(
      args: SelectSubset<T, PlanetsDeleteArgs>
    ): CheckSelect<T, Prisma__PlanetsClient<Planets>, Prisma__PlanetsClient<PlanetsGetPayload<T>>>

    /**
     * Update one Planets.
     * @param {PlanetsUpdateArgs} args - Arguments to update one Planets.
     * @example
     * // Update one Planets
     * const planets = await prisma.planets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlanetsUpdateArgs>(
      args: SelectSubset<T, PlanetsUpdateArgs>
    ): CheckSelect<T, Prisma__PlanetsClient<Planets>, Prisma__PlanetsClient<PlanetsGetPayload<T>>>

    /**
     * Delete zero or more Planets.
     * @param {PlanetsDeleteManyArgs} args - Arguments to filter Planets to delete.
     * @example
     * // Delete a few Planets
     * const { count } = await prisma.planets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlanetsDeleteManyArgs>(
      args?: SelectSubset<T, PlanetsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Planets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanetsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Planets
     * const planets = await prisma.planets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlanetsUpdateManyArgs>(
      args: SelectSubset<T, PlanetsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Planets.
     * @param {PlanetsUpsertArgs} args - Arguments to update or create a Planets.
     * @example
     * // Update or create a Planets
     * const planets = await prisma.planets.upsert({
     *   create: {
     *     // ... data to create a Planets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Planets we want to update
     *   }
     * })
    **/
    upsert<T extends PlanetsUpsertArgs>(
      args: SelectSubset<T, PlanetsUpsertArgs>
    ): CheckSelect<T, Prisma__PlanetsClient<Planets>, Prisma__PlanetsClient<PlanetsGetPayload<T>>>

    /**
     * Count the number of Planets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanetsCountArgs} args - Arguments to filter Planets to count.
     * @example
     * // Count the number of Planets
     * const count = await prisma.planets.count({
     *   where: {
     *     // ... the filter for the Planets we want to count
     *   }
     * })
    **/
    count<T extends PlanetsCountArgs>(
      args?: Subset<T, PlanetsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanetsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Planets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanetsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanetsAggregateArgs>(args: Subset<T, PlanetsAggregateArgs>): PrismaPromise<GetPlanetsAggregateType<T>>

    /**
     * Group by Planets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanetsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanetsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanetsGroupByArgs['orderBy'] }
        : { orderBy?: PlanetsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanetsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanetsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Planets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PlanetsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Galaxy<T extends GalaxysArgs = {}>(args?: Subset<T, GalaxysArgs>): CheckSelect<T, Prisma__GalaxysClient<Galaxys | null >, Prisma__GalaxysClient<GalaxysGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Planets findUnique
   */
  export type PlanetsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Planets
     * 
    **/
    select?: PlanetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlanetsInclude | null
    /**
     * Throw an Error if a Planets can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Planets to fetch.
     * 
    **/
    where: PlanetsWhereUniqueInput
  }


  /**
   * Planets findFirst
   */
  export type PlanetsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Planets
     * 
    **/
    select?: PlanetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlanetsInclude | null
    /**
     * Throw an Error if a Planets can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Planets to fetch.
     * 
    **/
    where?: PlanetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planets to fetch.
     * 
    **/
    orderBy?: Enumerable<PlanetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Planets.
     * 
    **/
    cursor?: PlanetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Planets.
     * 
    **/
    distinct?: Enumerable<PlanetsScalarFieldEnum>
  }


  /**
   * Planets findMany
   */
  export type PlanetsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Planets
     * 
    **/
    select?: PlanetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlanetsInclude | null
    /**
     * Filter, which Planets to fetch.
     * 
    **/
    where?: PlanetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planets to fetch.
     * 
    **/
    orderBy?: Enumerable<PlanetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Planets.
     * 
    **/
    cursor?: PlanetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planets.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PlanetsScalarFieldEnum>
  }


  /**
   * Planets create
   */
  export type PlanetsCreateArgs = {
    /**
     * Select specific fields to fetch from the Planets
     * 
    **/
    select?: PlanetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlanetsInclude | null
    /**
     * The data needed to create a Planets.
     * 
    **/
    data: XOR<PlanetsCreateInput, PlanetsUncheckedCreateInput>
  }


  /**
   * Planets createMany
   */
  export type PlanetsCreateManyArgs = {
    /**
     * The data used to create many Planets.
     * 
    **/
    data: Enumerable<PlanetsCreateManyInput>
  }


  /**
   * Planets update
   */
  export type PlanetsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Planets
     * 
    **/
    select?: PlanetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlanetsInclude | null
    /**
     * The data needed to update a Planets.
     * 
    **/
    data: XOR<PlanetsUpdateInput, PlanetsUncheckedUpdateInput>
    /**
     * Choose, which Planets to update.
     * 
    **/
    where: PlanetsWhereUniqueInput
  }


  /**
   * Planets updateMany
   */
  export type PlanetsUpdateManyArgs = {
    /**
     * The data used to update Planets.
     * 
    **/
    data: XOR<PlanetsUpdateManyMutationInput, PlanetsUncheckedUpdateManyInput>
    /**
     * Filter which Planets to update
     * 
    **/
    where?: PlanetsWhereInput
  }


  /**
   * Planets upsert
   */
  export type PlanetsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Planets
     * 
    **/
    select?: PlanetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlanetsInclude | null
    /**
     * The filter to search for the Planets to update in case it exists.
     * 
    **/
    where: PlanetsWhereUniqueInput
    /**
     * In case the Planets found by the `where` argument doesn't exist, create a new Planets with this data.
     * 
    **/
    create: XOR<PlanetsCreateInput, PlanetsUncheckedCreateInput>
    /**
     * In case the Planets was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PlanetsUpdateInput, PlanetsUncheckedUpdateInput>
  }


  /**
   * Planets delete
   */
  export type PlanetsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Planets
     * 
    **/
    select?: PlanetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlanetsInclude | null
    /**
     * Filter which Planets to delete.
     * 
    **/
    where: PlanetsWhereUniqueInput
  }


  /**
   * Planets deleteMany
   */
  export type PlanetsDeleteManyArgs = {
    /**
     * Filter which Planets to delete
     * 
    **/
    where?: PlanetsWhereInput
  }


  /**
   * Planets without action
   */
  export type PlanetsArgs = {
    /**
     * Select specific fields to fetch from the Planets
     * 
    **/
    select?: PlanetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlanetsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const GalaxysScalarFieldEnum: {
    galaxyId: 'galaxyId',
    name: 'name',
    description: 'description',
    color: 'color',
    size: 'size'
  };

  export type GalaxysScalarFieldEnum = (typeof GalaxysScalarFieldEnum)[keyof typeof GalaxysScalarFieldEnum]


  export const PlanetsScalarFieldEnum: {
    planetId: 'planetId',
    name: 'name',
    description: 'description',
    size: 'size',
    galaxyGalaxyId: 'galaxyGalaxyId'
  };

  export type PlanetsScalarFieldEnum = (typeof PlanetsScalarFieldEnum)[keyof typeof PlanetsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type GalaxysWhereInput = {
    AND?: Enumerable<GalaxysWhereInput>
    OR?: Enumerable<GalaxysWhereInput>
    NOT?: Enumerable<GalaxysWhereInput>
    galaxyId?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    color?: StringFilter | string
    size?: DecimalFilter | Decimal | DecimalJsLike | number | string
    planets?: PlanetsListRelationFilter
  }

  export type GalaxysOrderByWithRelationInput = {
    galaxyId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    size?: SortOrder
    planets?: PlanetsOrderByRelationAggregateInput
  }

  export type GalaxysWhereUniqueInput = {
    galaxyId?: string
  }

  export type GalaxysOrderByWithAggregationInput = {
    galaxyId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    size?: SortOrder
    _count?: GalaxysCountOrderByAggregateInput
    _avg?: GalaxysAvgOrderByAggregateInput
    _max?: GalaxysMaxOrderByAggregateInput
    _min?: GalaxysMinOrderByAggregateInput
    _sum?: GalaxysSumOrderByAggregateInput
  }

  export type GalaxysScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GalaxysScalarWhereWithAggregatesInput>
    OR?: Enumerable<GalaxysScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GalaxysScalarWhereWithAggregatesInput>
    galaxyId?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    color?: StringWithAggregatesFilter | string
    size?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type PlanetsWhereInput = {
    AND?: Enumerable<PlanetsWhereInput>
    OR?: Enumerable<PlanetsWhereInput>
    NOT?: Enumerable<PlanetsWhereInput>
    planetId?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    size?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Galaxy?: XOR<GalaxysRelationFilter, GalaxysWhereInput> | null
    galaxyGalaxyId?: StringNullableFilter | string | null
  }

  export type PlanetsOrderByWithRelationInput = {
    planetId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    size?: SortOrder
    Galaxy?: GalaxysOrderByWithRelationInput
    galaxyGalaxyId?: SortOrder
  }

  export type PlanetsWhereUniqueInput = {
    planetId?: string
  }

  export type PlanetsOrderByWithAggregationInput = {
    planetId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    size?: SortOrder
    galaxyGalaxyId?: SortOrder
    _count?: PlanetsCountOrderByAggregateInput
    _avg?: PlanetsAvgOrderByAggregateInput
    _max?: PlanetsMaxOrderByAggregateInput
    _min?: PlanetsMinOrderByAggregateInput
    _sum?: PlanetsSumOrderByAggregateInput
  }

  export type PlanetsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PlanetsScalarWhereWithAggregatesInput>
    OR?: Enumerable<PlanetsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PlanetsScalarWhereWithAggregatesInput>
    planetId?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    size?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    galaxyGalaxyId?: StringNullableWithAggregatesFilter | string | null
  }

  export type GalaxysCreateInput = {
    galaxyId?: string
    name: string
    description: string
    color: string
    size: Decimal | DecimalJsLike | number | string
    planets?: PlanetsCreateNestedManyWithoutGalaxyInput
  }

  export type GalaxysUncheckedCreateInput = {
    galaxyId?: string
    name: string
    description: string
    color: string
    size: Decimal | DecimalJsLike | number | string
    planets?: PlanetsUncheckedCreateNestedManyWithoutGalaxyInput
  }

  export type GalaxysUpdateInput = {
    galaxyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planets?: PlanetsUpdateManyWithoutGalaxyInput
  }

  export type GalaxysUncheckedUpdateInput = {
    galaxyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planets?: PlanetsUncheckedUpdateManyWithoutGalaxyInput
  }

  export type GalaxysCreateManyInput = {
    galaxyId?: string
    name: string
    description: string
    color: string
    size: Decimal | DecimalJsLike | number | string
  }

  export type GalaxysUpdateManyMutationInput = {
    galaxyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type GalaxysUncheckedUpdateManyInput = {
    galaxyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PlanetsCreateInput = {
    planetId?: string
    name: string
    description: string
    size: Decimal | DecimalJsLike | number | string
    Galaxy?: GalaxysCreateNestedOneWithoutPlanetsInput
  }

  export type PlanetsUncheckedCreateInput = {
    planetId?: string
    name: string
    description: string
    size: Decimal | DecimalJsLike | number | string
    galaxyGalaxyId?: string | null
  }

  export type PlanetsUpdateInput = {
    planetId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Galaxy?: GalaxysUpdateOneWithoutPlanetsInput
  }

  export type PlanetsUncheckedUpdateInput = {
    planetId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    galaxyGalaxyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlanetsCreateManyInput = {
    planetId?: string
    name: string
    description: string
    size: Decimal | DecimalJsLike | number | string
    galaxyGalaxyId?: string | null
  }

  export type PlanetsUpdateManyMutationInput = {
    planetId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PlanetsUncheckedUpdateManyInput = {
    planetId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    galaxyGalaxyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type PlanetsListRelationFilter = {
    every?: PlanetsWhereInput
    some?: PlanetsWhereInput
    none?: PlanetsWhereInput
  }

  export type PlanetsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GalaxysCountOrderByAggregateInput = {
    galaxyId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    size?: SortOrder
  }

  export type GalaxysAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type GalaxysMaxOrderByAggregateInput = {
    galaxyId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    size?: SortOrder
  }

  export type GalaxysMinOrderByAggregateInput = {
    galaxyId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    size?: SortOrder
  }

  export type GalaxysSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type GalaxysRelationFilter = {
    is?: GalaxysWhereInput | null
    isNot?: GalaxysWhereInput | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type PlanetsCountOrderByAggregateInput = {
    planetId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    size?: SortOrder
    galaxyGalaxyId?: SortOrder
  }

  export type PlanetsAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type PlanetsMaxOrderByAggregateInput = {
    planetId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    size?: SortOrder
    galaxyGalaxyId?: SortOrder
  }

  export type PlanetsMinOrderByAggregateInput = {
    planetId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    size?: SortOrder
    galaxyGalaxyId?: SortOrder
  }

  export type PlanetsSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type PlanetsCreateNestedManyWithoutGalaxyInput = {
    create?: XOR<Enumerable<PlanetsCreateWithoutGalaxyInput>, Enumerable<PlanetsUncheckedCreateWithoutGalaxyInput>>
    connectOrCreate?: Enumerable<PlanetsCreateOrConnectWithoutGalaxyInput>
    createMany?: PlanetsCreateManyGalaxyInputEnvelope
    connect?: Enumerable<PlanetsWhereUniqueInput>
  }

  export type PlanetsUncheckedCreateNestedManyWithoutGalaxyInput = {
    create?: XOR<Enumerable<PlanetsCreateWithoutGalaxyInput>, Enumerable<PlanetsUncheckedCreateWithoutGalaxyInput>>
    connectOrCreate?: Enumerable<PlanetsCreateOrConnectWithoutGalaxyInput>
    createMany?: PlanetsCreateManyGalaxyInputEnvelope
    connect?: Enumerable<PlanetsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type PlanetsUpdateManyWithoutGalaxyInput = {
    create?: XOR<Enumerable<PlanetsCreateWithoutGalaxyInput>, Enumerable<PlanetsUncheckedCreateWithoutGalaxyInput>>
    connectOrCreate?: Enumerable<PlanetsCreateOrConnectWithoutGalaxyInput>
    upsert?: Enumerable<PlanetsUpsertWithWhereUniqueWithoutGalaxyInput>
    createMany?: PlanetsCreateManyGalaxyInputEnvelope
    set?: Enumerable<PlanetsWhereUniqueInput>
    disconnect?: Enumerable<PlanetsWhereUniqueInput>
    delete?: Enumerable<PlanetsWhereUniqueInput>
    connect?: Enumerable<PlanetsWhereUniqueInput>
    update?: Enumerable<PlanetsUpdateWithWhereUniqueWithoutGalaxyInput>
    updateMany?: Enumerable<PlanetsUpdateManyWithWhereWithoutGalaxyInput>
    deleteMany?: Enumerable<PlanetsScalarWhereInput>
  }

  export type PlanetsUncheckedUpdateManyWithoutGalaxyInput = {
    create?: XOR<Enumerable<PlanetsCreateWithoutGalaxyInput>, Enumerable<PlanetsUncheckedCreateWithoutGalaxyInput>>
    connectOrCreate?: Enumerable<PlanetsCreateOrConnectWithoutGalaxyInput>
    upsert?: Enumerable<PlanetsUpsertWithWhereUniqueWithoutGalaxyInput>
    createMany?: PlanetsCreateManyGalaxyInputEnvelope
    set?: Enumerable<PlanetsWhereUniqueInput>
    disconnect?: Enumerable<PlanetsWhereUniqueInput>
    delete?: Enumerable<PlanetsWhereUniqueInput>
    connect?: Enumerable<PlanetsWhereUniqueInput>
    update?: Enumerable<PlanetsUpdateWithWhereUniqueWithoutGalaxyInput>
    updateMany?: Enumerable<PlanetsUpdateManyWithWhereWithoutGalaxyInput>
    deleteMany?: Enumerable<PlanetsScalarWhereInput>
  }

  export type GalaxysCreateNestedOneWithoutPlanetsInput = {
    create?: XOR<GalaxysCreateWithoutPlanetsInput, GalaxysUncheckedCreateWithoutPlanetsInput>
    connectOrCreate?: GalaxysCreateOrConnectWithoutPlanetsInput
    connect?: GalaxysWhereUniqueInput
  }

  export type GalaxysUpdateOneWithoutPlanetsInput = {
    create?: XOR<GalaxysCreateWithoutPlanetsInput, GalaxysUncheckedCreateWithoutPlanetsInput>
    connectOrCreate?: GalaxysCreateOrConnectWithoutPlanetsInput
    upsert?: GalaxysUpsertWithoutPlanetsInput
    disconnect?: boolean
    delete?: boolean
    connect?: GalaxysWhereUniqueInput
    update?: XOR<GalaxysUpdateWithoutPlanetsInput, GalaxysUncheckedUpdateWithoutPlanetsInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type PlanetsCreateWithoutGalaxyInput = {
    planetId?: string
    name: string
    description: string
    size: Decimal | DecimalJsLike | number | string
  }

  export type PlanetsUncheckedCreateWithoutGalaxyInput = {
    planetId?: string
    name: string
    description: string
    size: Decimal | DecimalJsLike | number | string
  }

  export type PlanetsCreateOrConnectWithoutGalaxyInput = {
    where: PlanetsWhereUniqueInput
    create: XOR<PlanetsCreateWithoutGalaxyInput, PlanetsUncheckedCreateWithoutGalaxyInput>
  }

  export type PlanetsCreateManyGalaxyInputEnvelope = {
    data: Enumerable<PlanetsCreateManyGalaxyInput>
  }

  export type PlanetsUpsertWithWhereUniqueWithoutGalaxyInput = {
    where: PlanetsWhereUniqueInput
    update: XOR<PlanetsUpdateWithoutGalaxyInput, PlanetsUncheckedUpdateWithoutGalaxyInput>
    create: XOR<PlanetsCreateWithoutGalaxyInput, PlanetsUncheckedCreateWithoutGalaxyInput>
  }

  export type PlanetsUpdateWithWhereUniqueWithoutGalaxyInput = {
    where: PlanetsWhereUniqueInput
    data: XOR<PlanetsUpdateWithoutGalaxyInput, PlanetsUncheckedUpdateWithoutGalaxyInput>
  }

  export type PlanetsUpdateManyWithWhereWithoutGalaxyInput = {
    where: PlanetsScalarWhereInput
    data: XOR<PlanetsUpdateManyMutationInput, PlanetsUncheckedUpdateManyWithoutPlanetsInput>
  }

  export type PlanetsScalarWhereInput = {
    AND?: Enumerable<PlanetsScalarWhereInput>
    OR?: Enumerable<PlanetsScalarWhereInput>
    NOT?: Enumerable<PlanetsScalarWhereInput>
    planetId?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    size?: DecimalFilter | Decimal | DecimalJsLike | number | string
    galaxyGalaxyId?: StringNullableFilter | string | null
  }

  export type GalaxysCreateWithoutPlanetsInput = {
    galaxyId?: string
    name: string
    description: string
    color: string
    size: Decimal | DecimalJsLike | number | string
  }

  export type GalaxysUncheckedCreateWithoutPlanetsInput = {
    galaxyId?: string
    name: string
    description: string
    color: string
    size: Decimal | DecimalJsLike | number | string
  }

  export type GalaxysCreateOrConnectWithoutPlanetsInput = {
    where: GalaxysWhereUniqueInput
    create: XOR<GalaxysCreateWithoutPlanetsInput, GalaxysUncheckedCreateWithoutPlanetsInput>
  }

  export type GalaxysUpsertWithoutPlanetsInput = {
    update: XOR<GalaxysUpdateWithoutPlanetsInput, GalaxysUncheckedUpdateWithoutPlanetsInput>
    create: XOR<GalaxysCreateWithoutPlanetsInput, GalaxysUncheckedCreateWithoutPlanetsInput>
  }

  export type GalaxysUpdateWithoutPlanetsInput = {
    galaxyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type GalaxysUncheckedUpdateWithoutPlanetsInput = {
    galaxyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PlanetsCreateManyGalaxyInput = {
    planetId?: string
    name: string
    description: string
    size: Decimal | DecimalJsLike | number | string
  }

  export type PlanetsUpdateWithoutGalaxyInput = {
    planetId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PlanetsUncheckedUpdateWithoutGalaxyInput = {
    planetId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PlanetsUncheckedUpdateManyWithoutPlanetsInput = {
    planetId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}